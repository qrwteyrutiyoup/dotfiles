#!/bin/bash

_enable_nicer_fonts()
{
    # nicer-looking font rendering
    gsettings "set" "org.gnome.settings-daemon.plugins.xsettings" "hinting" "slight"
    gsettings "set" "org.gnome.settings-daemon.plugins.xsettings" "antialiasing" "rgba"

    for p in freetype2-infinality lib32-freetype2-infinality fontconfig-infinality; do
        if ! _package_installed "$p"; then
            echo "-> Please install package '"$p"' from the AUR"
        fi
    done
}

_set_odd_aliases()
{
    # mplayer having problems with hdmi + audio / check out $ aplay -l
    # alias mplayer-hdmi="mplayer -ao alsa:device=hw=1.7"

    # phabricator
    alias sendpatch="arc diff --reviewers hugopl,lmoura,tullio,luck,dakerfp,lacerda,setanta,nick,zanoni HEAD~1"
}

_enable_icecc()
{
    export ICECC_VERSION=~/.icecc/gcc482-x86_64-e83cf8b56daafcdb71df84e892b8459d.tar.gz
    # export CCACHE_PREFIX=/usr/lib/icecream/bin/icecc
    mkdir -p ~/bin
    for c in gcc g++ cc c++; do
        #ln -sf /usr/bin/ccache ~/bin/${c}
       ln -sf /usr/lib/icecream/bin/icecc ~/bin/${c}
    done

    # gold linker - may be problematic in some cases. used mostly for webkit
    # ln -sf /usr/bin/ld.gold ~/bin/ld
}

build()
{
    local port="${1}"
    shift
    local args="${@}"

    local WEBKITDIR=~/projects/webkit
    export WEBKIT_OUTPUTDIR="${WEBKITDIR}"/"${port}"-build
    pushd "${WEBKITDIR}"

    case "${port}" in
    nix)
        Tools/Scripts/build-webkit --nix --prefix=~/nixbuild ${args}
        ;;
    efl)
        Tools/Scripts/build-webkit --efl --cmakeargs="-DSHARED_CORE=ON" ${args}
        ;;
    gtk)
        Tools/Scripts/build-webkit --gtk ${args}
        ;;
    *)
        echo "Usage: build <nix|efl|gtk> [optional args]"
        ;;
    esac
    popd
    unset WEBKIT_OUTPUTDIR
}

api-tests()
{
    local port="${1}"
    shift
    local args="${@}"
    local WEBKITDIR=~/projects/webkit
    export WEBKIT_OUTPUTDIR="${WEBKITDIR}"/"${port}"-build
    pushd "${WEBKITDIR}"
    case "${port}" in
    nix)
        ./Tools/Scripts/run-nix-tests ${args}
        ;;
    efl)
        ./Tools/Scripts/run-efl-tests ${args}
        ;;
    esac
    popd
    unset WEBKIT_OUTPUTDIR
}

layout-tests()
{
    local port="${1}"
    shift
    local args="${@}"
    local WEBKITDIR=~/projects/webkit
    export WEBKIT_OUTPUTDIR="${WEBKITDIR}"/"${port}"-build
    pushd "${WEBKITDIR}"
    case "${port}" in
    nix)
        ./Tools/Scripts/run-webkit-tests --no-show-results --no-new-test-results --no-sample-on-timeout --nix --exit-after-n-crashes-or-timeouts 20 --exit-after-n-failures 500 ${args}
        ;;
    efl)
        mesalib=$(pacman -Ql mesa 2>/dev/null | grep mesa-libGL | awk '{ print $2 }')
        if [ -n "${mesalib}" ]; then
            mkdir -p "${WEBKIT_OUTPUTDIR}"/mesa-libGL
            pushd "${WEBKIT_OUTPUTDIR}"/mesa-libGL
            ln -sf "${mesalib}" libGL.so
            popd
        else
            echo "mesa-libGL not found, but needed to run EFL layout tests. # pacman -S mesa"
        fi

        LD_LIBRARY_PATH="${WEBKIT_OUTPUTDIR}"/mesa-libGL ./Tools/Scripts/run-webkit-tests --no-show-results --no-new-test-results --no-sample-on-timeout --webkit-test-runner --efl --exit-after-n-crashes-or-timeouts 50 --exit-after-n-failures 500 ${args}
        ;;
    esac
    popd
    unset WEBKIT_OUTPUTDIR
}

nix_env()
{
    export LD_LIBRARY_PATH=~/nixbuild/lib/:~/projects/webkit/WebKitBuild/Dependencies/Root/lib64/
    export PKG_CONFIG_PATH=~/nixbuild/lib/pkgconfig/:~/projects/webkit/WebKitBuild/Dependencies/Root/lib64/pkgconfig/
}

ns3_env()
{
    export PATH=~/bin/python2-as-default:${PATH}
    export PS1="(ns3)${PS1}"
}

#_set_odd_aliases
#_enable_icecc

if [[ -f ~/.virtualenvs/webkit/bin/activate ]]; then . ~/.virtualenvs/webkit/bin/activate; fi
if [[ -f ~/.confidentialrc ]]; then . ~/.confidentialrc; fi
export PATH=/usr/lib/sumo/tools:$PATH
